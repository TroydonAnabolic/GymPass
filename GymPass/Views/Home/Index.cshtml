@model GymPass.Models.Facility

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Home Page";
}

@* Start Navigation *@
@if (SignInManager.IsSignedIn(User))
{
    <nav class="main-nav">
        <i class="fa fa-bars" onclick="openNav()"></i>
    </nav>

    <div id="mySidenav" class="sidenav">
        <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
        <div class="nav-other">
            <a class="border-nav" href="#">Unlock Door</a>
            <a class="border-nav" href="#">Select Facility</a>
            <a class="border-nav" href="#">Dashboard</a>
        </div>
        @*<div >
                <a href="#">Contact</a>
            </div>*@

        <form id="logout-main" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button type="submit" class="nav-link btn text-light main-logout">
                <i class="fas fa-sign-out-alt"></i>
                Logout
            </button>
        </form>
    </div>

    @* End Navigation *@

    @* Blur out the main gym icon when not inside *@
    <div class="@(@UserManager.GetUserAsync(User).Result.IsInsideGym ? " main-gym" : "not-in-use")">
        <div class="main-gym-icon">
            <div class="title-name">
                GYM PASS
            </div>


            <div class="main-pop-cont">
                <div class="realtime-indicator">
                    <div class="realtime-icons">
                        <img src="~/images/dumbbell.png" />
                    </div>
                    15
                </div>
                <div class="realtime-indicator">
                    <div class="realtime-icons">
                        <img src="~/images/icons8-treadmill-100.png" />
                    </div>
                    20
                </div>
                <div class="realtime-indicator">
                    <div class="realtime-icons">
                        <img src="~/images/icons8-warm-up-100.png" />
                    </div>
                    5
                </div>
                <div class="realtime-indicator">
                    <div class="realtime-icons">
                        <img src="~/images/Capacity/capacity-80.png" />
                    </div>
                    @Model.NumberOfClientsInGym
                </div>
            </div>
        </div>
    </div>

    <div class="access">

        <!-- Button trigger modal TO DO: Once i finish animation for access denied appearing only for 3 seconds, and scanning followed by success --> 
        @*<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
            Launch demo modal
        </button>*@

        <div class="access-container">
            @{
                // If the door is not currently opened show the lock symbol
                if (!ViewBag.DoorOpened)
                {
                    // Hide these form inputs and automatically post set values on click

                    <form asp-action="Index">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <input type="hidden" asp-for="FacilityID" />

                        <div class="form-group form-check hidden" style="height:0px;">
                            <label class="form-check-label">
                                <input id="open-door" class="form-check-input" asp-for="IsOpenDoorRequested" /> @Html.DisplayNameFor(model => model.IsOpenDoorRequested)
                            </label>
                        </div>

                        @if (@UserManager.GetUserAsync(User).Result.AccessGrantedToFacility)
                        {
                            // open a modal with further form groups asking for training duration and equipment to use with a continue button to close modal.
                            @* Start Modal for training intentions *@
                            <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
                                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-body">
                                            ...
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                            <button type="button" class="btn btn-primary">Save changes</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            @* End Modal for training intentions *@
                        }

                        <div class="form-group">
                            <button type="submit" class="locked nav-link btn">
                                <i class="fa fa-lock"></i>
                            </button>
                        </div>
                    </form>
                    // TODO:
                    //  ViewBag.CompletedGymEntries = false;
                    // make a partial view here, inside the partial view, have a modal inside with a separate form, this will allow you to select what you will lose
                    // there will be an option to skip for those who wish to skip it
                    // within the modal, have the form submit button to complete the modal post and set the ViewBad.CompletedGymEntries = true,
                    // inside the control use an await statement to ensure, redirect to page is not
                    // executed until the modal is posted, and the value of ViewBag.CompletedGymEntries is done.
                }


                // if the door is opened show the unlocked symbol
                else if (ViewBag.DoorOpened)
                {
                    <form asp-action="Index">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <input type="hidden" asp-for="FacilityID" />
                        <div class="form-group form-check hidden">
                            <label class="form-check-label">
                                <input id="deep-lens-scan" class="form-check-input" asp-for="IsOpenDoorRequested " /> @Html.DisplayNameFor(model => model.IsOpenDoorRequested)
                            </label>
                        </div>

                        <div class="form-group">
                            <button type="submit" class="unlocked nav-link btn">
                                <i class="fas fa-lock-open"></i>
                            </button>
                        </div>
                    </form>
                }
            }

            <div class="progress">
                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
            </div>
            @* TODO This alert comes up if unauthorized personell enters, when someone else enters, will use button on screen saying Entered gym (with a hidden attribute so it does not ruin UI),
        that will be revealed during testing to trigger theoretical camera, however we presume the camera sensor does what button does
          Also make the camera Highlight in red and grow and shrink when access failed for 5 seconds *@

            @{
                // Only when the user is not inside the gym do we trigger the status messages (given it is pressed, this ensures it is not trigerred when trying to leave)
                if ( !@UserManager.GetUserAsync(User).Result.IsInsideGym)
                {
                    // using jQuery we remove hidden attribute on button push, when user is not inside gym.
                    <div class="door-status temp-scan hidden">
                        SCANNING
                    </div>
                    // use of view bag as we cannot get access granted property value until the data is saved to the database, whilst view bag
                    if (!ViewBag.AccessGrantedToFacility && Model.IsOpenDoorRequested) // 
                    {
                        <div class="door-status">ACCESS DENIED!</div>
                    }
                }
                // if user is inside the gym, show welcome message
                else if (@UserManager.GetUserAsync(User).Result.IsInsideGym)
                {
                    // access is granted is shown when the server has access granted (page was refreshed)
                    if (@UserManager.GetUserAsync(User).Result.AccessGrantedToFacility)
                    {
                        <div class="door-status">
                            WELCOME @UserManager.GetUserAsync(User).Result.FirstName!
                        </div>
                    }
                }
            }
        </div>
    </div>
}

@* Hide the top navigation bar when on main page *@
<script>
    $(document).ready(function () {
        $("header").hide();

        // when we click the open button(given user is not inside and door), first show remove the hidden attr from the scanning, so it will show scanning
        // after 4 seconds it will remove scanning
        $("body > main > div.access > div > form > div:nth-child(3) > button > svg").click(function () {
         //   $("body > main > div.access > div > div.door-status.temp-scan.hidden").delay(2000).removeClass("hidden");
              //  .delay(500).addClass("hidden");

            var scan = $('body > main > div.access > div > div.door-status.temp-scan.hidden').removeClass('hidden');
            setTimeout(function () {
                scan.addClass('hidden');
            }, 3000);

            //var accessDenied = $('body > main > div.access > div > div.door-status.temp-scan.hidden').removeClass('hidden');
            //accessDenied(function () {
            //    scan.addClass('hidden');
            //}, 2000);

            // after scanning is complete, and page refreshes, if user is welcome, wait 5 seconds for the page refresh then leave welcome on the screen while user is inside the gym
            if ($('body > main > div.access > div > div:nth-child(4):contains("WELCOME")').length > 0) {
                $('body > main > div.access > div > div:nth-child(4):contains("WELCOME")').removeClass("hidden");
            }
            // on page refresh, if it is access denied then hide after page refresh, 
            else if ($('body > main > div.access > div > div:nth-child(4):contains("ACCESS")').length > 0) {
                $('body > main > div.access > div > div:nth-child(4):contains("ACCESS")');
            }
        });
    });
</script>
