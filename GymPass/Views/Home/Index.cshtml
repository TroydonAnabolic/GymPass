@model GymPass.Models.Facility

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Home Page";
}

@* Start Navigation *@
@if (SignInManager.IsSignedIn(User))
{
    <nav class="main-nav">
        <i class="fa fa-bars" onclick="openNav()"></i>
    </nav>

    <div id="mySidenav" class="sidenav">
        <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
        <div class="nav-other">
            <a asp-action="Index" asp-controller="Home" asp-route-id="@UserManager.GetUserAsync(User).Result.DefaultGym" class="border-nav">MY GYM</a>
            <a class="border-nav" href="#">Select Facility</a>
            <a class="border-nav" href="#">Dashboard</a>
        </div>
        @*<div >
                <a href="#">Contact</a>
            </div>*@

        <form id="logout-main" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button type="submit" class="nav-link btn text-light main-logout">
                <i class="fas fa-sign-out-alt"></i>
                Logout
            </button>
        </form>
    </div>

    @* End Navigation *@

    @* Blur out the main gym icon when not inside *@
    <div class="@(@UserManager.GetUserAsync(User).Result.IsInsideGym ? " main-gym" : "not-in-use")">
        <div class="main-gym-icon">
            <div class="title-name">
                GYM PASS
            </div>

            @*if user is in gym then we can go here*@
            <div class="@(@UserManager.GetUserAsync(User).Result.IsInsideGym ? "log-workout-home" : "hidden") ">
                <a asp-action="LogWorkout" asp-controller="Facilities" asp-route-id="@UserManager.GetUserAsync(User).Result.DefaultGym"> Log Workout</a>
            </div>

            <div class="occupancy-title">
                Gym Occupany
            </div>
            <div class="main-pop-cont">

                <div class="realtime-indicator">
                    <div class="realtime-icons">
                        <img src="~/images/dumbbell.png" />
                    </div>
                    Weights: @Model.NumberOfClientsUsingWeightRoom
                </div>
                <div class="realtime-indicator">
                    <div class="realtime-icons">
                        <img src="~/images/icons8-treadmill-100.png" />
                    </div>
                    Cardio: @Model.NumberOfClientsUsingCardioRoom
                </div>
                <div class="realtime-indicator">
                    <div class="realtime-icons">
                        <img src="~/images/icons8-warm-up-100.png" />
                    </div>
                    Stretch: @Model.NumberOfClientsUsingStretchRoom
                </div>
                <div class="realtime-indicator">
                    <div class="realtime-icons">
                        <img src="~/images/Capacity/capacity-80.png" />
                    </div>
                    Total: @Model.NumberOfClientsInGym
                </div>
                @*TODO: Use JavaScript to interchange/toggle display between established number of clients, with actual amount, using hidden, using click/automatic trigger
                    <div class="realtime-indicator">
                        <div class="realtime-icons">
                            <img src="~/images/Capacity/capacity-80.png" />
                        </div>
                        Total: @Model.NumberOfClientsInGym
                    </div>*@
            </div>
        </div>
    </div>

    <div class="access">

        <div class="access-container">
            @{
                // If the door is not currently opened show the lock symbol
                if (!ViewBag.DoorOpened)
                {
                    // Hide these form inputs and automatically post set values on click

                    <form asp-action="Index">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <input type="hidden" asp-for="FacilityID" />

                        <div class="form-group form-check hidden" style="height:0px;">
                            <label class="form-check-label">
                                <input id="open-door" class="form-check-input" asp-for="IsOpenDoorRequested" /> @Html.DisplayNameFor(model => model.IsOpenDoorRequested)
                            </label>
                        </div>

                        @*// TODO:
                            // there will be an option to skip for those who wish to skip it
                            // within the modal, have the form submit button to complete the modal post and set the ViewBad.CompletedGymEntries = true,
                            // inside the control use an await statement to ensure, redirect to page is not
                            // executed until the modal is posted, and the value of ViewBag.CompletedGymEntries is done.*@
                        @if (ViewBag.AccessGrantedToFacility)
                        {
                            // TODO: Learn/use AJAX to asynchronously transfer the data in between controller and view
                        }
                        @* End Modal for training intentions *@


                        <div class="form-group">
                            <button type="submit" class="locked nav-link btn">
                                <i class="fa fa-lock"></i>
                            </button>
                        </div>
                    </form>

                }
                // if the door is opened show the unlocked symbol and also present the modal
                else if (ViewBag.DoorOpened)
                {
                    <form asp-action="Index">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <input type="hidden" asp-for="FacilityID" />
                        <div class="form-group form-check hidden">
                            <label class="form-check-label">
                                <input id="deep-lens-scan" class="form-check-input" asp-for="IsOpenDoorRequested " /> @Html.DisplayNameFor(model => model.IsOpenDoorRequested)
                            </label>
                        </div>

                        <div class="form-group">
                            <button type="submit" class="unlocked nav-link btn">
                                <i class="fas fa-lock-open"></i>
                            </button>
                        </div>
                    </form>
                }
            }

            <div class="progress">
                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
            </div>

            @{
                // Only when the user is not inside the gym do we trigger the status messages (given it is pressed, this ensures it is not trigerred when trying to leave)
                if (!@UserManager.GetUserAsync(User).Result.IsInsideGym)
                {
                    // using jQuery we remove hidden attribute on button push, when user is not inside gym, and show for 2 seconds always
                    <div class="door-status temp-scan hidden">
                        SCANNING
                    </div>
                    // use of view bag as we cannot get access granted property value until the data is saved to the database, whilst view bag
                    // if access denied msg not received, access is denied previously, and door open is requested
                    // if access denied msg is received and the user is not auth
                    if (!ViewBag.AccessDeniedMsgRecieved) //  && ViewBag.AccessGrantedToFacility
                    {
                        <div class="door-status">ACCESS DENIED!</div>
                    }
                }
                // if user is inside the gym, show welcome message
                else if (@UserManager.GetUserAsync(User).Result.IsInsideGym)
                {
                    // access is granted is shown when the server has access granted (page was refreshed)
                    if (@UserManager.GetUserAsync(User).Result.AccessGrantedToFacility)
                    {
                        <div class="door-status">
                            WELCOME @UserManager.GetUserAsync(User).Result.FirstName!
                        </div>
                    }
                }
            }
        </div>
    </div>
}

@* Hide the top navigation bar when on main page *@
<script>
    $(document).ready(function () {
        $("header").hide();


    });
</script>
